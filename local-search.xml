<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>screen使用教程-无比简单</title>
    <link href="undefined2019/07/01/screen%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-%E6%97%A0%E6%AF%94%E7%AE%80%E5%8D%95/"/>
    <url>2019/07/01/screen%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-%E6%97%A0%E6%AF%94%E7%AE%80%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h2 id="常规命令"><a href="#常规命令" class="headerlink" title="常规命令"></a>常规命令</h2><pre><code class="javaScript">创建：screen -S fuck查看有多少会话：screen -ls恢复：screen -r fuck删除 screen -S fuck -X quit</code></pre><h3 id="screen-r-fuck-失败"><a href="#screen-r-fuck-失败" class="headerlink" title="screen -r fuck 失败"></a>screen -r fuck 失败</h3><pre><code>如果不能恢复：先screen -d fuck,再screen -r fuck</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx的邻居caddy</title>
    <link href="undefined2019/07/01/nginx%E7%9A%84%E9%82%BB%E5%B1%85caddy/"/>
    <url>2019/07/01/nginx%E7%9A%84%E9%82%BB%E5%B1%85caddy/</url>
    
    <content type="html"><![CDATA[<p>本文不讲安装,只讲最简单的配置<br>每次配置更新完要 sudo pkill -USR1 caddy 刷新</p><h2 id="将静态文件映射到二级域名"><a href="#将静态文件映射到二级域名" class="headerlink" title="将静态文件映射到二级域名"></a>将静态文件映射到二级域名</h2><pre><code>你想在外网访问的网站地址 {  tls 你的破https证书  gzip  root  你的网站本地地址  index 首页 不填默认index的东西}</code></pre><h2 id="反代理"><a href="#反代理" class="headerlink" title="反代理"></a>反代理</h2><pre><code>你想在外网访问的网站地址 {  tls 你的破https证书  proxy / localhost:你想访问的破端口}</code></pre><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>可以把几个文件合并拼接起来<br>例如</p><h3 id="a-conf"><a href="#a-conf" class="headerlink" title="a.conf"></a>a.conf</h3><pre><code>你的破配置</code></pre><h3 id="b-conf"><a href="#b-conf" class="headerlink" title="b.conf"></a>b.conf</h3><pre><code>import a.conf</code></pre><p>相当于把<strong>a.conf</strong>里的代码拷贝到<strong>b.conf</strong>里.没啥特别的</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ORM是什么？</title>
    <link href="undefined2019/05/17/ORM%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>2019/05/17/ORM%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="引用-阮一峰博客"><a href="#引用-阮一峰博客" class="headerlink" title="引用-阮一峰博客"></a>引用-<a href="http://www.ruanyifeng.com/blog/2019/02/orm-tutorial.html" target="_blank" rel="noopener">阮一峰博客</a></h1><h2 id="它是什么"><a href="#它是什么" class="headerlink" title="它是什么"></a>它是什么</h2><h3 id="字面意思"><a href="#字面意思" class="headerlink" title="字面意思"></a>字面意思</h3><p>实际上就是个缩写，表示对象-关系映射的缩写</p><ul><li><code>O</code>-&gt;<strong>Object</strong></li><li><code>RM</code>-&gt;<strong>Relational</strong> (关系) <strong>Mapping(映射)</strong></li></ul><h3 id="代表什么思想"><a href="#代表什么思想" class="headerlink" title="代表什么思想"></a>代表什么思想</h3><p>实际上就是一种把数据库映射成对象的想法</p><ul><li>数据库的表（<code>table</code>） –&gt; 类（<code>class</code>）</li><li>记录（<code>record</code>，行数据）–&gt; 对象（<code>object</code>）</li><li>字段（<code>field</code>）–&gt; 对象的属性（<code>attribute</code>）</li></ul><p><strong>比如说查询语句 <code>SELECT id, first_name, last_name, phone, birth_date, sex FROM persons WHERE id = 10</code></strong></p><p>对应到代码就是</p><pre><code class="c#">res = db.执行数据库(sql);name = res[0][&quot;FIRST_NAME&quot;];</code></pre><p>那么<strong>ORM</strong>的写法就是</p><pre><code class="c#">p = Person.get(10);name = p.first_name;</code></pre><p>这样的好处就是可以不需要了解数据库底层，因为它不需要接触<code>SQL</code>语句</p><p>所以<code>ORM</code>有这样一些优点</p><ul><li><code>ORM</code>生态已经比较完备，有很多的工具支持</li><li>天生的<code>MVC</code>，<code>ORM</code>就是天生的<code>Model</code></li><li>可以不写<code>SQL</code>了。</li></ul><p>它的缺点来说：</p><ul><li>复杂查询很难做到，做到了性能也很差</li><li>学习成本比较高</li><li>由于不需要接触<code>SQL</code>所以无法定制一些特殊的<code>SQL</code></li></ul><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>目前公认最规范的是 Ruby 语言的 <a href="https://guides.rubyonrails.org/active_record_basics.html" target="_blank" rel="noopener">Active Record</a>。Active Record 对于对象和数据库表的映射，有一些命名限制。</p><p>（1）一个类对应一张表。类名是单数，且首字母大写；表名是复数，且全部是小写。比如，表 <code>books</code> 对应类 <code>Book</code>。</p><p>（2）如果名字是不规则复数，则类名依照英语习惯命名，比如，表 <code>mice</code> 对应类 <code>Mouse</code>，表 <code>people</code> 对应类 <code>Person</code>。</p><p>（3）如果名字包含多个单词，那么类名使用首字母全部大写的骆驼拼写法，而表名使用下划线分隔的小写单词。比如，表 <code>book_clubs</code> 对应类 <code>BookClub</code>，表 <code>line_items</code> 对应类 <code>LineItem</code>。</p><p>（4）每个表都必须有一个主键字段，通常是叫做 <code>id</code> 的整数字段。外键字段名约定为单数的表名 + 下划线 + id，比如 <code>item_id</code> 表示该字段对应 <code>items</code> 表的 <code>id</code> 字段。</p><h2 id="示例库-OpenRecord"><a href="#示例库-OpenRecord" class="headerlink" title="示例库 OpenRecord"></a>示例库 <a href="https://github.com/PhilWaldmann/openrecord" target="_blank" rel="noopener">OpenRecord</a></h2><p><code>OpenRecord</code> 是仿 <code>Active Record</code> 的，将其移植到了 <code>JavaScript</code>，而且实现得很轻量级，学习成本较低。我写了一个<a href="https://github.com/ruanyf/openrecord-demos" target="_blank" rel="noopener">示例库</a>，请将它克隆到本地。</p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>使用 ORM 的第一步，就是你必须告诉它，怎么连接数据库（<a href="https://github.com/ruanyf/openrecord-demos/blob/master/demos/demo01.js" target="_blank" rel="noopener">完整代码</a>看这里）。</p><blockquote><pre><code class="javascript">// demo01.jsconst Store = require(&#39;openrecord/store/sqlite3&#39;)const store = new Store({    type: &#39;sqlite3&#39;,    file: &#39;./db/sample.db&#39;,    autoLoad: true,})await store.connect()</code></pre></blockquote><p>连接成功以后，就可以操作数据库了。</p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>没啥好说的，就是<strong>ORM</strong>的框架会把表转成类对象</p><h2 id="CRUD-操作"><a href="#CRUD-操作" class="headerlink" title="CRUD 操作"></a>CRUD 操作</h2><p>也没什么好说的，增删改查都从查询语句变成了调用方法</p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>表与表之间的关系（relation），分成三种。</p><blockquote><ul><li><strong>一对一</strong>（one-to-one）：一种对象与另一种对象是一一对应关系，比如一个学生只能在一个班级。</li><li><strong>一对多</strong>（one-to-many）： 一种对象可以属于另一种对象的多个实例，比如一张唱片包含多首歌。</li><li><strong>多对多</strong>（many-to-many）：两种对象彼此都是 “一对多” 关系，比如一张唱片包含多首歌，同时一首歌可以属于多张唱片。</li></ul></blockquote><p>了解到这就足够用了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可能是全x最好的vue教程</title>
    <link href="undefined2018/07/12/vue%E6%95%99%E7%A8%8B/"/>
    <url>2018/07/12/vue%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-响应式原理"><a href="#Vue-响应式原理" class="headerlink" title="Vue 响应式原理"></a>Vue 响应式原理</h1><h2 id="为什么不支持-IE8"><a href="#为什么不支持-IE8" class="headerlink" title="为什么不支持 IE8"></a>为什么不支持 IE8</h2><p>其实是依赖<strong>Object.defineProperty()</strong>，进行数据挟持的，而这个 api 在 IE8 下仅仅支持 Dom 对象不支持原生对象，所以 Vue2.x 是不支持 IE8 及以下的浏览器。</p><h2 id="Object-defineProperty-object-propertyname-descriptor"><a href="#Object-defineProperty-object-propertyname-descriptor" class="headerlink" title="Object.defineProperty(object, propertyname, descriptor )"></a>Object.defineProperty(object, propertyname, descriptor )</h2><p>此函数有 3 个参数，均是必传的参数。这个函数的特性其实很像 c#的属性，有 c#基础的理解起来应该很容易。</p><ul><li><p>object：需要设置的对象</p></li><li><p>propertyname：需要设置的属性名（对象的键名）</p></li><li><p>descriptor：描述符，一个对象，用于设置属性的特性。</p><pre><code class="javascript">{    value:undefined, // 表示此属性的值。    writable:false, // 决定此属性是否可写    configurable:true,        /*        决定此属性是否可配置，        如果为false则writable, configurable, enumerable这些属性的设置都将无效.        即使重新调用defineProperty函数也无效。        特别指出 试图修改configurable的值会抛出异常。        */    enumerable:false, // 是否可枚举    get:undefined, // 函数，当取值时执行    set:undefined, // 函数，当设置值时执行}</code></pre><pre><code class="javascript">// 此demo示范get和set的作用，其他的属性自行尝试。const setName = function(newValue) {  console.log(&#39;新的值&#39;, newValue);};const getName = function() {  console.log(&#39;取值啦&#39;);};var demo = {  name: &#39;初始值&#39;};Object.defineProperty(demo, &#39;name&#39;, {  set: setName,  get: getName});demo.name = &#39;初始值2&#39;;// -&gt; 新的值 初始值2let name = demo.name;// -&gt; 取值啦</code></pre></li></ul><h2 id="Vue-cli3-0-一些变动"><a href="#Vue-cli3-0-一些变动" class="headerlink" title="Vue-cli3.0 一些变动"></a>Vue-cli3.0 一些变动</h2><ul><li>集成 sass/scss 只需要 <code>yarn add sass-loader node-sass</code></li><li>设置 scss 全局函数要在<code>vue.config.js</code>里添加</li></ul><pre><code>module.exports = {  // ...  css: {    loaderOptions: {      sass: {        data: `          @import &quot;@/你的全局scss文件&quot;;        `      }    }  }}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端架构-vue-初次学习</title>
    <link href="undefined2018/05/30/web%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    <url>2018/05/30/web%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h2 id="整体框架：vue2-x"><a href="#整体框架：vue2-x" class="headerlink" title="整体框架：vue2.x"></a>整体框架：vue2.x</h2><h3 id="为什么选择-Vue"><a href="#为什么选择-Vue" class="headerlink" title="为什么选择 Vue"></a>为什么选择 Vue</h3><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><ul><li>具有热更新功能，代码变更保存即可看到效果，对提高调试与开发的效率有很大帮助。</li><li>社区资源丰富，大部分的问题均可查找得到合理的解决方案。</li><li>语法简洁。</li><li>Api 友好。</li><li>Github 维护热度高，大量高质量程序员都参与其中。</li></ul><h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><ul><li>Bilibili、简书、饿了么、掘金、搜狐手机版、UC 奇趣百科等知名网站都在使用 Vue</li></ul><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><ul><li>不输给目前其他流行框架 如 ReactJs，AngularJS</li><li>原生渲染</li><li>自动按需加载组件，ReactJs 暂时不能做到自动按需加载。</li></ul><h4 id="自身优势"><a href="#自身优势" class="headerlink" title="自身优势"></a>自身优势</h4><ul><li>高度模块化。</li><li>维护简单。</li><li>数据双向绑定，跨组件强制单向数据流。</li></ul><h2 id="UI-库"><a href="#UI-库" class="headerlink" title="UI 库"></a>UI 库</h2><p>后期有需求会增加别的 ui 库</p><ul><li><a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">ElementUi</a></li><li><a href="https://chenz24.github.io/vue-blu/#/" target="_blank" rel="noopener">Vue blu</a></li></ul><h2 id="网络请求框架"><a href="#网络请求框架" class="headerlink" title="网络请求框架"></a>网络请求框架</h2><ul><li><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a><pre><code>使用范例axios    .get(&#39;rul&#39;)    .then(response =&gt; (this.info = response))</code></pre></li></ul><h2 id="工具链："><a href="#工具链：" class="headerlink" title="工具链："></a>工具链：</h2><ul><li><a href="https://yarnpkg.com/lang/en/" target="_blank" rel="noopener">yarn</a>：快速、可靠、安全的依赖管理，npm 的升级版。</li><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>：是 JavaScript 世界的包管理器，大部分的 JS 开发者会在这里发布他们的库。</li><li><a href="https://webpack.docschina.org/" target="_blank" rel="noopener">webpack</a>：前端构建工具，用与打包压缩混淆前端代码。</li><li><a href="http://eslint.cn/" target="_blank" rel="noopener">Eslint</a>：静态代码检查器，用于规范开发编码习惯。</li></ul><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><ul><li>组件内部双向绑定</li><li>子组件与父组件单向绑定</li></ul><h2 id="设计模式：Mvvm"><a href="#设计模式：Mvvm" class="headerlink" title="设计模式：Mvvm"></a>设计模式：Mvvm</h2><ul><li>为了让页面与页面逻辑分离。</li><li>降低耦合度。</li></ul><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/5692364-6ccaecf3481d7dce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="image.png"></p><ul><li>node_modules：存放 npm 下载的包，所有第三方的库都会存放在这里。</li><li>Page：用于存放页面<ul><li>View：具体的页面样式与 html 结构。<ul><li>Css：控制页面的样式。</li><li>Html：控制页面的 Dom 树。</li></ul></li><li>Model：每个页面所需要的数据结构。</li><li>ViewModel：页面的 VM，负责具体业务并且让 View 与 Model 交互。</li></ul></li><li>Components：用于存放单个组件。<ul><li>ControlComponents：控制类组件，具有可操作的能力，例如操纵 Dom，可以存储输入状态如日期选择器。</li><li>ViewComponents：展示类组件，不具有操作的能力，不存储非 UI 的状态，不直接修改外部环境。</li><li>ContainerComponents：容器类组件 如卡片。</li></ul></li><li>router<ul><li>设置页面的路由</li></ul></li></ul><h2 id="组件结构"><a href="#组件结构" class="headerlink" title="组件结构"></a>组件结构</h2><ul><li>扩展 js<br><img src="https://upload-images.jianshu.io/upload_images/5692364-ea55f8bca6e4a162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="公共js.png"></li></ul><h3 id="控制类组件"><a href="#控制类组件" class="headerlink" title="控制类组件"></a>控制类组件</h3><p><img src="https://upload-images.jianshu.io/upload_images/5692364-0f1828413f3d6554.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="控制类组件构建.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/5692364-519efa270d13e96f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="控制类组件.png"></p><ul><li>展示类组件<br><img src="https://upload-images.jianshu.io/upload_images/5692364-1306b65112c7c634.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="展示类组件结构.png"></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5692364-e73c2b538b813cb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="展示类组件.png"></p><ul><li>容器类组件<br><img src="https://upload-images.jianshu.io/upload_images/5692364-b16163ce1f818544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="容器类组件.png"></li></ul><h2 id="页面构建结构"><a href="#页面构建结构" class="headerlink" title="页面构建结构"></a>页面构建结构</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="https://upload-images.jianshu.io/upload_images/5692364-01b499bb6f636217.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="页面结构.png"></p><h4 id="首页（例子）"><a href="#首页（例子）" class="headerlink" title="首页（例子）"></a>首页（例子）</h4><p><img src="https://upload-images.jianshu.io/upload_images/5692364-0ee0f6ea4cef58ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="首页结构.png"></p><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>一个页面由多个组件组建而成，ViewModel 控制组件交互，并且负责具体业务。</p><h3 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h3><p><img src="https://upload-images.jianshu.io/upload_images/5692364-7d83c04898cd2cce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="页面结构.png"></p><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><ul><li>组件不能含有具体业务逻辑。</li><li>展示类组件应只允许输入数据。</li><li>控制类组件要暴露回调函数给外部组件控制，并且隐藏不必要的细节。</li><li><code>View</code> 与 <code>Model</code> 的交互必须通过 <code>ViewModel</code></li><li>凡是可复用的函数或者组件都必须抽象封装出来。</li><li>不许对 api 请求 try catch，应该判断状态码做相应的事情。</li><li>尽量使用 <code>let</code> 和 <code>const</code> 声明变量名。</li><li>禁止使用 <code>eval</code> 函数</li><li>禁止使用 <code>NaN</code>，要用 <code>isNaN()</code></li><li>变量命名要尽量易懂，不容易懂的应加上注释</li><li>函数用小驼峰命名，</li><li>组件命名遵循：“my-component”，且使用小驼峰。</li><li><code>class</code> 命名大驼峰。</li><li>变量名 小驼峰。</li><li><code>HTML、CSS、Vue</code> 文件需要同名并且命名需要是名词。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读黑客与画家有感</title>
    <link href="undefined2018/05/13/%E8%AF%BB%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E6%9C%89%E6%84%9F/"/>
    <url>2018/05/13/%E8%AF%BB%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>前几天一口气读完了黑客与画家，留下点感悟。</p><h2 id="书呆子不受欢迎的原因"><a href="#书呆子不受欢迎的原因" class="headerlink" title="书呆子不受欢迎的原因"></a>书呆子不受欢迎的原因</h2><p>学校是个特殊的地方，它是人为设计出来的，一半像无菌室，一半像野蛮之地。它就像人生一样，无所不包，却又不是事情的真相。它只是一个短暂的过程，只要你向前看，就能超越它，即使你身在其中。</p><ul><li>受欢迎是要付出精力的，他们更愿意把精力放在变得更优秀上。</li><li>欺负书呆子的原因可能是为了自己不被孤立。</li><li>特别受欢迎的人很少去欺负特别不受欢迎的人。</li></ul><h2 id="黑客与画家"><a href="#黑客与画家" class="headerlink" title="黑客与画家"></a>黑客与画家</h2><h3 id="黑客真正想做的是设计优美的软件"><a href="#黑客真正想做的是设计优美的软件" class="headerlink" title="黑客真正想做的是设计优美的软件"></a>黑客真正想做的是设计优美的软件</h3><ul><li>大公司里设计软件的职责是技工，翻译产品经历的“构想”成代码</li><li>想战胜大公司的方法是将设计权交给黑客</li><li>编程跟绘画很像，不要一开始就追求完美的软件；起个草案，逐步修改</li></ul><h2 id="不能说的话"><a href="#不能说的话" class="headerlink" title="不能说的话"></a>不能说的话</h2><p>不能说的话，社会中总有些话好像是不能说出来的，政治不正确的话就是其中一类。</p><h3 id="找出不能说的话"><a href="#找出不能说的话" class="headerlink" title="找出不能说的话"></a>找出不能说的话</h3><ul><li>与历史对比，看看哪些以前可以说现在不能说，或者反之。</li><li>想想有什么话是你不敢在大众面前说的。</li><li>看看那些卫道者到底在捍卫什么。</li><li>观察禁忌是如何产生的，来龙去脉是什么。</li><li>那些所谓的异端邪说，被冠上有伤风化之类的帽子的话。</li></ul><h3 id="为什么要找不能说的话？"><a href="#为什么要找不能说的话？" class="headerlink" title="为什么要找不能说的话？"></a>为什么要找不能说的话？</h3><ul><li>好奇心，纯粹的好奇。</li><li>没有什么东西是不应该思考就有答案的。</li></ul><h3 id="发现了不能说的话之后怎么办？"><a href="#发现了不能说的话之后怎么办？" class="headerlink" title="发现了不能说的话之后怎么办？"></a>发现了不能说的话之后怎么办？</h3><p>闭嘴，别说。</p><h2 id="创造财富的最好的方法就是创业"><a href="#创造财富的最好的方法就是创业" class="headerlink" title="创造财富的最好的方法就是创业"></a>创造财富的最好的方法就是创业</h2><ul><li>可测量性：你的职位必须是可测量的，不然做再多也没有更多报酬。</li><li>可放大性：你的决定必须能够产生巨大效应。</li></ul><h2 id="防止垃圾邮件的一种方法"><a href="#防止垃圾邮件的一种方法" class="headerlink" title="防止垃圾邮件的一种方法"></a>防止垃圾邮件的一种方法</h2><ul><li>对单词做<a href="https://www.jianshu.com/p/5e8d7984e629" target="_blank" rel="noopener">贝叶斯判断</a></li></ul><h2 id="研究和设计的区别"><a href="#研究和设计的区别" class="headerlink" title="研究和设计的区别"></a>研究和设计的区别</h2><p>研究必须是新的，而设计必须是“好”的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机杂锦</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack-简易</title>
    <link href="undefined2018/05/09/webpack%E6%95%99%E7%A8%8B/"/>
    <url>2018/05/09/webpack%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><ul><li>安装 node.js npm</li><li>安装 webpack npm install webpack -g</li><li>进入项目目录 是否有<code>package.json</code>没有就通过<code>npm init</code>创建</li><li>在项目目录下命令行执行<code>npm install webpack --save-dev</code></li><li>创建<code>webpack.config.js</code>文件,下面是例子</li></ul><pre><code>const path = require(&#39;path&#39;)module.exports = {  entry: &#39;./js/main.js&#39;, // 代码输入文件  // 下面的文件夹和文件不需要自己创建  output: {    path: path.resolve(__dirname, &#39;./dist&#39;), // 代码输入文件夹    filename: &#39;build.js&#39;  }}</code></pre><ul><li><p>在 package.json 文件</p><ul><li>在 scripts 下加<code>&quot;start&quot;: &quot;webpack&quot;</code></li></ul></li><li><p>命令行 npm start</p></li><li><p>其他的文件写法</p></li></ul><p><code>app.js</code></p><pre><code>const Say = require(&#39;./to.js&#39;)……Say()</code></pre><p><code>to.js</code></p><pre><code>var Say = function () {    console.log(&#39;hello&#39;)}module.exports = Say</code></pre><ul><li>导入 jq 等插件的方式<code>npm install jquery --save-dev</code></li></ul><pre><code>var $ = require(&#39;jquery&#39;)</code></pre><ul><li>运行<br>命令行敲 <code>webpack --mode production</code><br>如果想实时刷新<code>webpack --mode production --watch</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈依赖注入</title>
    <link href="undefined2018/05/09/%E6%B5%85%E8%B0%88%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <url>2018/05/09/%E6%B5%85%E8%B0%88%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="依赖注入个人见解"><a href="#依赖注入个人见解" class="headerlink" title="依赖注入个人见解"></a>依赖注入个人见解</h1><p>当笔记用，勿喷。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li>我不想因为我的依赖变化导致每次我都要改造自己</li><li>我不想再控制我的依赖了</li><li>我不关心我在依赖谁，我只想使用依赖的功能而已</li></ul><h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h2><p>依赖注入跟控制反转是一起出现的，首先就要理解什么叫依赖注入，什么叫控制反转。</p><ul><li>依赖注入：将依赖用注入的方式送给你。</li><li>控制反转：本来依赖由你来控制，现在你不控制它了，随便丢给某人控制，这叫控制反转。</li></ul><p>举个例子：</p><ul><li>依赖注入：你家里有上千台手机，每天你都要用手机看直播，你只想看直播，并不关心什么手机，然后每天管家都会去挑选一个合适的手机塞给你，这个<code>管家塞给你</code>的过程就叫依赖注入。</li><li>控制反转：本来这个手机是由你来控制用什么手机的，现在你不关心它了，丢给管家处理，这个管理权的变化就叫控制反转。</li></ul><p>一个很精彩的例子<br><code>假设你自己是一个“口”字，你的需求是变成一个别的字，这时候如果传一个“人”，就变成了“囚”；如果传入“十”，就变成了“田”；如果传入“木”就变成了“困”</code></p><p>依赖抽象而不依赖具体</p><p>控制反转是一种思想，实现控制反转的技术手段就是依赖注入。</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机杂锦</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js实现懒加载和瀑布流</title>
    <link href="undefined2018/01/10/%E7%80%91%E5%B8%83%E6%B5%81/"/>
    <url>2018/01/10/%E7%80%91%E5%B8%83%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="懒加载与瀑布流结合"><a href="#懒加载与瀑布流结合" class="headerlink" title="懒加载与瀑布流结合"></a>懒加载与瀑布流结合</h1><p><a href="https://lazy.dashao.me" target="_blank" rel="noopener">演示地址</a></p><h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><ul><li>使用了语义化的 html 使得代码更可读，利用了部分 html5 特性。</li><li>大量使用 es6 语法使得代码更简洁</li><li>支持响应式和媒体查询</li></ul><h2 id="GitHub-地址-大家多多支持～"><a href="#GitHub-地址-大家多多支持～" class="headerlink" title="GitHub 地址 大家多多支持～"></a><a href="https://github.com/chendss/WaterfallLazyLoading" target="_blank" rel="noopener">GitHub 地址</a> 大家多多支持～</h2><p><img src="http://upload-images.jianshu.io/upload_images/5692364-63bd3df17e2da54c.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="loading.gif"></p><p><img src="http://upload-images.jianshu.io/upload_images/5692364-08c776512cd93d40.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="lazy.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2048小游戏javascript实现</title>
    <link href="undefined2018/01/02/2048%E5%B0%8F%E6%B8%B8%E6%88%8Fjavascript%E5%AE%9E%E7%8E%B0/"/>
    <url>2018/01/02/2048%E5%B0%8F%E6%B8%B8%E6%88%8Fjavascript%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="原生-js-实现-2048-小游戏"><a href="#原生-js-实现-2048-小游戏" class="headerlink" title="原生 js 实现 2048 小游戏"></a>原生 js 实现 2048 小游戏</h1><p><a href="https://github.com/chendss/2048" target="_blank" rel="noopener">GitHub 地址</a> ，希望大家多多捧场觉得还可以就给个 star 吧～</p><h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><ul><li>利用了 css3 实现动画效果</li><li>使用了语义化的 html 使得代码更可读，利用了部分 html5 特性。</li><li>纯原生的 javascript 代码操控 DOM 控制元素组件</li><li>大量使用 es6 语法使得代码更简洁</li></ul><h2 id="试玩地址"><a href="#试玩地址" class="headerlink" title="试玩地址"></a>试玩地址</h2><p><a href="https://2048.dashao.me" target="_blank" rel="noopener">2048</a></p><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="http://upload-images.jianshu.io/upload_images/5692364-f61ba16480e4202b.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="gif.gif"><br><img src="http://upload-images.jianshu.io/upload_images/5692364-dd1072566a35798c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="start.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/5692364-e2a41c6b1edea24b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="end.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>个人项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react-native-update 热更新插件翻译</title>
    <link href="undefined2017/10/18/react-native-update%E7%83%AD%E6%9B%B4%E6%96%B0%E6%8F%92%E4%BB%B6%E7%BF%BB%E8%AF%91/"/>
    <url>2017/10/18/react-native-update%E7%83%AD%E6%9B%B4%E6%96%B0%E6%8F%92%E4%BB%B6%E7%BF%BB%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p>#原文地址：<a href="https://github.com/remobile/react-native-update" target="_blank" rel="noopener">https://github.com/remobile/react-native-update</a></p><h1 id="React-Native-更新-remobile"><a href="#React-Native-更新-remobile" class="headerlink" title="React Native 更新 (remobile)"></a>React Native 更新 (remobile)</h1><p>更新 js 版本和 app 版本</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code class="sh">npm install @remobile/react-native-update --save</code></pre><h3 id="安装-Android"><a href="#安装-Android" class="headerlink" title="安装 (Android)"></a>安装 (Android)</h3><pre><code class="gradle">...include &#39;:react-native-update&#39;project(&#39;:react-native-update&#39;).projectDir= new File(settingsDir, &#39;../node_modules/@remobile/react-native-update/android&#39;)</code></pre><ul><li>在 <code>android/app/build.gradle</code></li></ul><pre><code class="gradle">...dependencies {    ...    compile project(&#39;:react-native-update&#39;)}</code></pre><ul><li>注册模块 (在 MainActivity.java)</li></ul><pre><code class="java">......import com.remobile.update.RCTUpdateMgr;  // &lt;--- import......public class MainApplication extends Application implements ReactApplication {    private RCTUpdateMgr mUpdateMgr; // &lt;------ add here    private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {        ......        @Override        protected String getJSBundleFile() {            return mUpdateMgr.getBundleUrl();   // &lt;------ change here        }        @Override        protected List&lt;ReactPackage&gt; getPackages() {            mUpdateMgr = new RCTUpdateMgr(MainActivity.activity);            return Arrays.&lt;ReactPackage&gt;asList(            ......            mUpdateMgr.getReactPackage(),       // &lt;------ add here            ......            );        }    };    ......}</code></pre><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="UpdatePage-js"><a href="#UpdatePage-js" class="headerlink" title="UpdatePage.js"></a>UpdatePage.js</h4><p>#####定义全局变量</p><pre><code class="js">&#39;use strict&#39;;import React, { Component } from &#39;react&#39;;import {  View,  StyleSheet,  Platform,  Text,  Image,  TouchableHighlight} from &#39;react-native&#39;;import ReactNative form &#39;react-native&#39;import Update form &#39;@remobile/react-native-update&#39;varSTATUS_GET_VERSION = 0, // 获得版本号状态STATUS_HAS_VEW_VERSION = 1, // 有新版本状态STATUS_HAS_NOT_VEW_VERSION = 2, // 没有新版本号状态STATUS_DOWNLOAD_APK_PROGESS = 3, // 下载apk状态STATUS_DOWNLOAD_JS_PROGESS = 4, // 下载js状态STATUS_UNZIP_JS_PROGESS = 5, // 解压js状态STATUS_GET_VERSION_ERROR = 6, // 获得版本异常状态STATUS_DOWNKOAD_APK_ERROR = 7, // 下载apk异常状态STATUS_DOWNKOAD_JS_ERROR = 8, // 下载js异常状态STATUS_UNZIP_JS_ERROR = 9, // 解压js异常状态STATUS_FAILED_INSTALL_ERROR = 10,  //失败安装异常状态STATUS_UPDATE_END = 11; //更新结束状态varERROR_NULL = 0,ERROR_DOWNKOAD_APK = 1, // 异常下载apkERROR_DOWNKOAD_JS = 2, // 异常下载jsERROR_FAILED_INSTALL = 3, // 失败安装ERROR_UNZIP_JS = 4; // 解压jsvar PROGRESS_WIDTH = sr.tw*0.7;var {Button, ProgressBar} = COMPONENTS;</code></pre><p>#####进度 view</p><pre><code>var ProgressInfo = React.createClass({    render() {        const { progress } = this.props;        if (progress &lt; 1000) {            return (                &lt;View&gt;                    &lt;Text&gt;{this.props.title} [{progress}%]&lt;/Text&gt;                    &lt;ProgressBar                        fillStyle={{}}                        backgroundStyle={{backgroundColor: '#cccccc', borderRadius: 2}}                        style={{marginTop: 10, width:PROGRESS_WIDTH}}                        progress={progress/100.0}                        /&gt;                    &lt;View style={styles.progressText}&gt;                        &lt;Text&gt;0&lt;/Text&gt;                        &lt;Text&gt;100&lt;/Text&gt;                    &lt;/View&gt;                &lt;/View&gt;            );        } else {            let size = progress/1000/1024/1024;            return (                &lt;View style={{flex: 1, alignItems: 'center'}}&gt;                    &lt;Text&gt;{this.props.title} [{size.toFixed(2)} M]&lt;/Text&gt;                &lt;/View&gt;            );        }    }});</code></pre><p>#####页面显示 view ######函数</p><pre><code>module.exports = React.createClass({    getInitialState() {        const {options} = this.props;        return {            options,            status: !options ?            STATUS_GET_VERSION : options.newVersion ? STATUS_HAS_VEW_VERSION : STATUS_HAS_NOT_VEW_VERSION,            progress: 0,        };    },    componentWillMount() {        if (!this.state.options) {            Update.checkVersion({                versionUrl: app.route.ROUTE_VERSION_INFO_URL,                iosAppId: CONSTANTS.IOS_APPID,            }).then((options)=&gt;{                this.setState({options, status: !options ?                STATUS_GET_VERSION_ERROR : options.newVersion ?                STATUS_HAS_VEW_VERSION : STATUS_HAS_NOT_VEW_VERSION});            })        }    },    onError(errCode) {        if (errCode == ERROR_DOWNKOAD_APK) {            this.setState({status: STATUS_DOWNKOAD_APK_ERROR});        } else if (errCode == ERROR_DOWNKOAD_JS) {            this.setState({status: STATUS_DOWNKOAD_JS_ERROR});        } else if (errCode == ERROR_FAILED_INSTALL) {            this.setState({status: STATUS_FAILED_INSTALL_ERROR});        } else if (errCode == ERROR_UNZIP_JS) {            this.setState({status: STATUS_UNZIP_JS_ERROR});        }    },    doUpdate() {        const {jsVersionCode, trackViewUrl} = this.state.options;        if (jsVersionCode !== undefined) {            Update.updateJS({                jsVersionCode,                jsbundleUrl: app.isandroid?app.route.ROUTE_JS_ANDROID_URL:app.route.ROUTE_JS_IOS_URL,                onDownloadJSProgress:(progress)=&gt;{this.setState({status: STATUS_DOWNLOAD_JS_PROGESS,progress})},                onUnzipJSProgress:(progress)=&gt;{this.setState({status: STATUS_UNZIP_JS_PROGESS,progress})},                onUnzipJSEnd:()=&gt;{this.setState({status: STATUS_UPDATE_END})},                onError:(errCode)=&gt;{this.onError(errCode)},            });        } else {            Update.updateApp({                trackViewUrl,                androidApkUrl:app.route.ROUTE_APK_URL,                androidApkDownloadDestPath:&#39;/sdcard/yxjqd.apk&#39;,                onDownloadAPKProgress:(progress)=&gt;{this.setState({status: STATUS_DOWNLOAD_APK_PROGESS,progress})},                onError:(errCode)=&gt;{this.onError(errCode)},            });        }    },</code></pre><p>######页面的 render</p><pre><code>    render() {        var components = {};        const {          currentVersion,          newVersion,          description        } = this.state.options||{currentVersion:Update.getVersion()};        components[STATUS_GET_VERSION] = (            &lt;Text style={styles.textInfo}&gt;正在获取版本号&lt;/Text&gt;        );        components[STATUS_HAS_NOT_VEW_VERSION] = (            &lt;Text style={styles.textInfo}&gt;当前版本已经是最新版本&lt;/Text&gt;        );        components[STATUS_GET_VERSION_ERROR] = (            &lt;Text style={styles.textInfo}&gt;获取版本信息失败，请稍后再试&lt;/Text&gt;        );        components[STATUS_DOWNKOAD_APK_ERROR] = (            &lt;Text style={styles.textInfo}&gt;下载apk文件失败，请稍后再试&lt;/Text&gt;        );        components[STATUS_DOWNKOAD_JS_ERROR] = (            &lt;Text style={styles.textInfo}&gt;下载js bundle失败，请稍后再试&lt;/Text&gt;        );        components[STATUS_UNZIP_JS_ERROR] = (            &lt;Text style={styles.textInfo}&gt;解压js bundle失败，请稍后再试&lt;/Text&gt;        );        components[STATUS_FAILED_INSTALL_ERROR] = (            &lt;Text style={styles.textInfo}&gt;你放弃了安装&lt;/Text&gt;        );        components[STATUS_HAS_VEW_VERSION] = (            &lt;View style={styles.textInfoContainer}&gt;                &lt;Text style={styles.textInfo}&gt;发现新版本{newVersion}&lt;/Text&gt;                &lt;View style={styles.descriptionContainer}&gt;                    {                        description &amp;&amp; description.map((item, i)=&gt;{                            return (                                &lt;Text style={styles.textInfo}                                  key={i}&gt;{(i+1)+&#39;. &#39;+item}                                &lt;/Text&gt;                            )                        })                    }                &lt;/View&gt;                &lt;Button onPress={this.doUpdate}                    style={styles.button_layer}                    textStyle={styles.button_text}&gt;立即更新              &lt;/Button&gt;            &lt;/View&gt;        );        components[STATUS_DOWNLOAD_APK_PROGESS] = (            &lt;ProgressInfo                title=&quot;正在下载APK&quot;                progress={this.state.progress} /&gt;        );        components[STATUS_DOWNLOAD_JS_PROGESS] = (            &lt;ProgressInfo                title=&quot;正在下载Bundle文件&quot;                progress={this.state.progress} /&gt;        );        components[STATUS_UNZIP_JS_PROGESS] = (            &lt;ProgressInfo                title=&quot;正在解压Bundle文件&quot;                progress={this.state.progress} /&gt;        );        components[STATUS_UPDATE_END] = (            &lt;Text&gt;正在重启...&lt;/Text&gt;        );        return (            ……        );    },});</code></pre><p>######样式</p><pre><code>var styles = StyleSheet.create({    ……});</code></pre><h4 id="UpdateInfoBox-js"><a href="#UpdateInfoBox-js" class="headerlink" title="UpdateInfoBox.js"></a>UpdateInfoBox.js</h4><p>#####全局变量</p><pre><code class="js">&#39;use strict&#39;;var React = require(&#39;react&#39;);var ReactNative = require(&#39;react-native&#39;);var { StyleSheet, View, Text, Image, TouchableOpacity } = ReactNative;var Update = require(&#39;@remobile/react-native-update&#39;);var STATUS_HAS_VEW_VERSION = 0,  STATUS_DOWNLOAD_APK_PROGESS = 1,  STATUS_DOWNLOAD_JS_PROGESS = 2,  STATUS_UNZIP_JS_PROGESS = 3,  STATUS_DOWNKOAD_APK_ERROR = 4,  STATUS_DOWNKOAD_JS_ERROR = 5,  STATUS_UNZIP_JS_ERROR = 6,  STATUS_FAILED_INSTALL_ERROR = 7,  STATUS_UPDATE_END = 8;var ERROR_NULL = 0,  ERROR_DOWNKOAD_APK = 1,  ERROR_DOWNKOAD_JS = 2,  ERROR_FAILED_INSTALL = 3,  ERROR_UNZIP_JS = 4;var PROGRESS_WIDTH = sr.tw * 0.7;var { Button, ProgressBar } = COMPONENTS;</code></pre><p>#####进度 view</p><pre><code>var ProgressInfo = React.createClass({    render() {        const { progress } = this.props;        if (progress &lt; 1000) {            return (                &lt;View style={[styles.functionContainer, {alignItems: &#39;center&#39;, paddingVertical: 30}]}&gt;                    &lt;Text&gt;{this.props.title} [{progress}%]&lt;/Text&gt;                    &lt;ProgressBar                        fillStyle={{}}                        backgroundStyle={{backgroundColor: '#cccccc', borderRadius: 2}}                        style={{marginTop: 10, width:PROGRESS_WIDTH}}                        progress={progress/100.0}                        /&gt;                    &lt;View style={styles.progressText}&gt;                        &lt;Text&gt;0&lt;/Text&gt;                        &lt;Text&gt;100&lt;/Text&gt;                    &lt;/View&gt;                &lt;/View&gt;            );        } else {            let size = progress/1000/1024/1024;            return (                &lt;View style={[styles.functionContainer, {alignItems: &#39;center&#39;, paddingVertical: 30}]}&gt;                    &lt;Text&gt;{this.props.title} [ {size.toFixed(2)} M ]&lt;/Text&gt;                &lt;/View&gt;            );        }    }});</code></pre><p>#####页面 view ######函数</p><pre><code>module.exports = React.createClass({    getInitialState() {        return {            status:STATUS_HAS_VEW_VERSION,            progress: 0,        };    },    onError(errCode) {        if (errCode == ERROR_DOWNKOAD_APK) {            this.setState({status: STATUS_DOWNKOAD_APK_ERROR});        } else if (errCode == ERROR_DOWNKOAD_JS) {            this.setState({status: STATUS_DOWNKOAD_JS_ERROR});        } else if (errCode == ERROR_FAILED_INSTALL) {            this.setState({status: STATUS_FAILED_INSTALL_ERROR});        } else if (errCode == ERROR_UNZIP_JS) {            this.setState({status: STATUS_UNZIP_JS_ERROR});        }    },    doUpdate() {        const {jsVersionCode, trackViewUrl} = this.props.options;        if (jsVersionCode !== undefined) {            Update.updateJS({                jsVersionCode,                jsbundleUrl: app.isandroid?app.route.ROUTE_JS_ANDROID_URL:app.route.ROUTE_JS_IOS_URL,                onDownloadJSProgress:(progress)=&gt;{this.setState({status: STATUS_DOWNLOAD_JS_PROGESS,progress})},                onUnzipJSProgress:(progress)=&gt;{this.setState({status: STATUS_UNZIP_JS_PROGESS,progress})},                onUnzipJSEnd:()=&gt;{this.setState({status: STATUS_UPDATE_END})},                onError:(errCode)=&gt;{this.onError(errCode)},            });        } else {            Update.updateApp({                trackViewUrl,                androidApkUrl:app.route.ROUTE_APK_URL,                androidApkDownloadDestPath:&#39;/sdcard/yxjqd.apk&#39;,                onDownloadAPKProgress:(progress)=&gt;{this.setState({status: STATUS_DOWNLOAD_APK_PROGESS,progress})},                onError:(errCode)=&gt;{this.onError(errCode)},            });        }    },</code></pre><p>######render</p><pre><code>    render() {        const components = {};        const {newVersion, description} = this.props.options;        components[STATUS_HAS_VEW_VERSION] = (            &lt;View style={styles.functionContainer}&gt;                &lt;Text style={styles.title}&gt;{`发现新版本(${newVersion})`}&lt;/Text&gt;                &lt;Text style={styles.redLine}&gt;                &lt;/Text&gt;                &lt;Text style={styles.content}&gt;                    {&quot;更新内容：&quot;}                &lt;/Text&gt;                {                    description.map((item, i)=&gt;{                        return (                            &lt;Text style={styles.contentItem} key={i}&gt;{&#39;- &#39;+item}&lt;/Text&gt;                        )                    })                }                &lt;View style={styles.buttonViewStyle}&gt;                    &lt;TouchableOpacity                        onPress={app.closeModal}                        style={styles.buttonStyleContainCannel}&gt;                        &lt;Text style={styles.buttonStyleCannel}&gt;以后再说&lt;/Text&gt;                    &lt;/TouchableOpacity&gt;                    &lt;TouchableOpacity                        onPress={this.doUpdate}                        style={styles.buttonStyleContain}&gt;                        &lt;Text style={styles.buttonStyle} &gt;立即更新&lt;/Text&gt;                    &lt;/TouchableOpacity&gt;                &lt;/View&gt;            &lt;/View&gt;        );        components[STATUS_DOWNKOAD_APK_ERROR] = (            &lt;View style={[styles.functionContainer, {alignItems: &#39;center&#39;, paddingVertical: 30}]}&gt;                &lt;Text style={styles.textInfo}&gt;下载apk文件失败，请在设置里重新更新&lt;/Text&gt;                &lt;TouchableOpacity                    onPress={app.closeModal}                    style={styles.buttonStyleContainCannel}&gt;                    &lt;Text style={styles.buttonStyleCannel}&gt;我知道了&lt;/Text&gt;                &lt;/TouchableOpacity&gt;            &lt;/View&gt;        );        components[STATUS_DOWNKOAD_JS_ERROR] = (            &lt;View style={[styles.functionContainer, {alignItems: &#39;center&#39;, paddingVertical: 30}]}&gt;                &lt;Text style={styles.textInfo}&gt;下载js bundle失败，请在设置里重新更新&lt;/Text&gt;                &lt;TouchableOpacity                    onPress={app.closeModal}                    style={styles.buttonStyleContainCannel}&gt;                    &lt;Text style={styles.buttonStyleCannel}&gt;我知道了&lt;/Text&gt;                &lt;/TouchableOpacity&gt;            &lt;/View&gt;        );        components[STATUS_UNZIP_JS_ERROR] = (            &lt;View style={[styles.functionContainer, {alignItems: &#39;center&#39;, paddingVertical: 30}]}&gt;                &lt;Text style={styles.textInfo}&gt;解压js bundle失败，请在设置里重新更新&lt;/Text&gt;                &lt;TouchableOpacity                    onPress={app.closeModal}                    style={styles.buttonStyleContainCannel}&gt;                    &lt;Text style={styles.buttonStyleCannel}&gt;我知道了&lt;/Text&gt;                &lt;/TouchableOpacity&gt;            &lt;/View&gt;        );        components[STATUS_FAILED_INSTALL_ERROR] = (            &lt;View style={[styles.functionContainer, {alignItems: &#39;center&#39;, paddingVertical: 30}]}&gt;                &lt;Text style={styles.textInfo}&gt;你放弃了安装&lt;/Text&gt;                &lt;TouchableOpacity                    onPress={app.closeModal}                    style={styles.buttonStyleContainCannel}&gt;                    &lt;Text style={styles.buttonStyleCannel}&gt;我知道了&lt;/Text&gt;                &lt;/TouchableOpacity&gt;            &lt;/View&gt;        );        components[STATUS_DOWNLOAD_APK_PROGESS] = (            &lt;ProgressInfo                title=&quot;正在下载APK&quot;                progress={this.state.progress} /&gt;        );        components[STATUS_DOWNLOAD_JS_PROGESS] = (            &lt;ProgressInfo                title=&quot;正在下载Bundle文件&quot;                progress={this.state.progress} /&gt;        );        components[STATUS_UNZIP_JS_PROGESS] = (            &lt;ProgressInfo                title=&quot;正在解压Bundle文件&quot;                progress={this.state.progress} /&gt;        );        components[STATUS_UPDATE_END] = (            &lt;Text&gt;即将重启...&lt;/Text&gt;        );        return (            &lt;View style={styles.container}&gt;                {components[this.state.status]}            &lt;/View&gt;        );    },});</code></pre><p>######样式</p><pre><code>var styles = StyleSheet.create({   ……});</code></pre><h2 id="Update-的方法"><a href="#Update-的方法" class="headerlink" title="Update 的方法"></a>Update 的方法</h2><ul><li><code>Update.getVersion</code> - 获得当前版本<ul><li>返回值是 x.x.x</li></ul></li><li><code>Update.checkVersion</code> - 检查服务器版本</li><li><code>Update.updateApp</code> - 更新 apk 或 ios appstore</li><li><code>Update.updateJS</code> - 更新 js 捆绑文件</li></ul><h2 id="检查版本并且显示更新对话框"><a href="#检查版本并且显示更新对话框" class="headerlink" title="检查版本并且显示更新对话框"></a>检查版本并且显示更新对话框</h2><pre><code class="js">const Update = require(&#39;@remobile/react-native-update&#39;);const UpdateInfoBox = require(&#39;../modules/update/UpdateInfoBox&#39;);Update.checkVersion({  versionUrl: app.route.ROUTE_VERSION_INFO_URL,  iosAppId: CONSTANTS.IOS_APPID}).then(options =&gt; {  if (options &amp;&amp; options.newVersion) {    app.showModal(&lt;UpdateInfoBox options={options} /&gt;, {      backgroundColor: &#39;rgba(0, 0, 0, 0.6)&#39;    });  }});</code></pre><h2 id="检查版本和显示更新页面"><a href="#检查版本和显示更新页面" class="headerlink" title="检查版本和显示更新页面"></a>检查版本和显示更新页面</h2><pre><code class="js">const Update = require(&#39;@remobile/react-native-update&#39;);const UpdatePage = require(&#39;../modules/update/UpdatePage&#39;);Update.checkVersion({  versionUrl: app.route.ROUTE_VERSION_INFO_URL,  iosAppId: CONSTANTS.IOS_APPID}).then(options =&gt; {  app.navigator.push({    title: &#39;在线更新&#39;,    component: UpdatePage,    passProps: { options }  });});</code></pre><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><pre><code>* versionUrl：服务器上的版本的url:    * format: { &quot;versionCode&quot;:1, &quot;versionName&quot;:&quot;1.0&quot;, &quot;jsVersionCode&quot;:2, &quot;description（描述）&quot;:&quot;hello&quot;}   这个结构体将传递给needUpdateApp和updateUpdateJS，如果你设置它们， 所以你可以自定义格式，但是versionCode和jsVersionCode必须保持一致</code></pre><pre><code>    * iosAppId:the appid on app Store## Update App Or JS```jsdoUpdate() {    const {jsVersionCode, trackViewUrl} = this.props.options;    if (jsVersionCode !== undefined) {        Update.updateJS({            jsVersionCode,            jsbundleUrl: app.isandroid?app.route.ROUTE_JS_ANDROID_URL:app.route.ROUTE_JS_IOS_URL,            onDownloadJSProgress:(progress)=&gt;{this.setState({status: STATUS_DOWNLOAD_JS_PROGESS,progress})},            onUnzipJSProgress:(progress)=&gt;{this.setState({status: STATUS_UNZIP_JS_PROGESS,progress})},            onUnzipJSEnd:()=&gt;{this.setState({status: STATUS_UPDATE_END})},            onError:(errCode)=&gt;{this.onError(errCode)},        });    } else {        Update.updateApp({            trackViewUrl,            androidApkUrl:app.route.ROUTE_APK_URL,            androidApkDownloadDestPath:&#39;/sdcard/yxjqd.apk&#39;,            onDownloadAPKProgress:(progress)=&gt;{this.setState({status: STATUS_DOWNLOAD_APK_PROGESS,progress})},            onError:(errCode)=&gt;{this.onError(errCode)},        });    }},</code></pre><h3 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h3><pre><code>* jsbundleUrl:js捆绑网址    * 当只有js代码更改或图像资源更改，我希望您发布jsbundle，称为次要版本    * 包括www / index.android.bundle或www / index.ios.bundle    * 包括android上的图像目录，ios上的资源目录    * 在android上，image dir包含一些动态图像（这个版本添加的新图像）    * 发布小版本你应该修改jsVersionCode* androidApkUrl:apk的网址    * 只有native代码改变了，你需要在Android上发布apk或者在ios上发布ipa，叫做Marjor版本    * 发布Marjor版本，您应该增加versionCode并将jsVersionCode设置为0* androidApkDownloadDestPath：apk文件下载路径，例如/ sdcard / download，确保它存在* onDownloadAPKStart:function    * 当apk开始下载时回调* onDownloadAPKProgress:function    * 当apk正在下载时回调    * 将通过{total：xx，loaded：xx} 1参数* onDownloadAPKEnd:function    * 当apk下载结束时回调* onDownloadJSStart:function* onDownloadJSProgress:function    * 当apk正在下载时回调，    * 将通过{total：xx，loaded：xx} 1参数* onDownloadJSEnd:function* onUnzipJSStart:function* onUnzipJSProgress:function    * 解压时候回调,    * 将通过{total：xx，loaded：xx} 1参数* onUnzipJSEnd:function* onError:function    * 将通过errorCode    * var ERROR_NULL = 0,          ERROR_DOWNKOAD_APK = 1,          ERROR_DOWNKOAD_JS = 2,          ERROR_GET_VERSION = 3,          ERROR_UNZIP_JS = 4;</code></pre><h2 id="生成捆绑"><a href="#生成捆绑" class="headerlink" title="生成捆绑"></a>生成捆绑</h2><pre><code class="bash">#!/bin/bashdistpath=../../localServer/public/downloadfunction genIOSBundle() {    react-native bundle \        --platform ios \        --reset-cache \        --verbose \        --entry-file index.ios.js \        --bundle-output ./tools/www/index.ios.bundle \        --assets-dest ./tools/www/ \        --dev false}function genAndroidBundle() {    react-native bundle \        --platform android \        --reset-cache \        --verbose \        --entry-file index.android.js \        --bundle-output ./tools/www/index.android.bundle \        --assets-dest ./tools/www/ \        --dev false}function zipWWW() {    node -e &quot;!function(){function i(e,r){var o=n.readdirSync(e);o.forEach(function(o){var s=e+&#39;/&#39;+o;n.statSync(s).isDirectory()?i(s,r+&#39;/&#39;+o):c.folder(r).file(o,n.readFileSync(s))})}function e(e,r,o){r=r||&#39;&#39;,o=o||e+&#39;.zip&#39;,i(e,r);var s=c.generate({base64:!1,compression:&#39;DEFLATE&#39;});n.writeFile(o,s,&#39;binary&#39;,function(){console.log(&#39;success&#39;)})}var r=require(&#39;jszip&#39;),n=require(&#39;fs&#39;),c=new r,o=process.argv.splice(1);e.apply(null,o)}();&quot;  www _www www.zip}function genMd5List() {    cd ./tools    # git co head ${distpath}/${1}_md5.json    node -e &quot;var o=process.argv;require(&#39;./getMd5List&#39;)(o[1],o[2])&quot; ${1} ${distpath}}function zipFile() {    zipWWW    mv ./www.zip ${distpath}/js${1}.zip    rm -fr www    mv ./${1}_md5.json ${distpath}/${1}_md5.json    echo &quot;${distpath}&quot;}function buildAndroid() {    rm -fr www    mkdir www    cd ..    genAndroidBundle    genMd5List android    zipFile android}function buildIos() {    rm -fr www    mkdir www    cd ..    genIOSBundle    genMd5List ios    zipFile ios}function main() {    if [ &quot;$1&quot; = &quot;android&quot; ];then        buildAndroid    elif [ &quot;$1&quot; = &quot;ios&quot; ];then        buildIos    elif [ &quot;$1&quot; = &quot;all&quot; ];then        buildAndroid        buildIos    else        echo &quot;Usage: ./genbundle ios|android|all&quot;    fi}main $@</code></pre><ul><li>确保安装 jszip 在 npm 在全局(global)，我们使用它的 zip</li></ul><h3 id="服务器端-version-json"><a href="#服务器端-version-json" class="headerlink" title="服务器端 version.json"></a>服务器端 version.json</h3><pre><code class="json">{  &quot;iosPassed&quot;: true,  &quot;iosJsVersionCode&quot;: 0,  &quot;iosDescription&quot;: [&quot;修正bug&quot;, &quot;添加新功能&quot;],  &quot;androidPassed&quot;: {    &quot;baidu&quot;: false,    &quot;default&quot;: true  },  &quot;versionName&quot;: &quot;1.0&quot;,  &quot;versionCode&quot;: 1048576,  &quot;androidJsVersionCode&quot;: 0,  &quot;androidDescription&quot;: [&quot;修改bug&quot;, &quot;添加新功能&quot;]}</code></pre><h3 id="看详细使用"><a href="#看详细使用" class="headerlink" title="看详细使用"></a>看详细使用</h3><ul><li><a href="https://github.com/remobile/react-native-template" target="_blank" rel="noopener">https://github.com/remobile/react-native-template</a></li></ul><h4 id="工具在"><a href="#工具在" class="headerlink" title="工具在"></a>工具在</h4><p><a href="https://github.com/remobile/react-native-template/blob/master/project/tools" target="_blank" rel="noopener">useful tools</a></p><p>####例子在 react-native-template<br><a href="https://github.com/remobile/react-native-template/blob/master/project/App/modules/update" target="_blank" rel="noopener">Update</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>XamarinForms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一本漫画闯天涯</title>
    <link href="undefined2017/06/25/%E4%B8%80%E6%9C%AC%E6%BC%AB%E7%94%BB%E9%97%AF%E5%A4%A9%E6%B6%AF/"/>
    <url>2017/06/25/%E4%B8%80%E6%9C%AC%E6%BC%AB%E7%94%BB%E9%97%AF%E5%A4%A9%E6%B6%AF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>星仔本是酒吧一个小服务员，一次偶然的机会见到了黑社会火拼，黑老大给了他一张名片为以后的剧情铺垫。</p></blockquote><p>黑老大抓了一个对头的人严刑拷打，希望可以供出幕后主谋，威逼利诱下供出了自己的老大洪义，黑老大放他走。他走的时候遇见杀手，被杀。</p><p>黑老大约洪义谈判，洪义迟到。骂了一顿黑老大，黑老大手下不开心想干掉他，洪义从车里抓出一个人-黑老大的儿子，大摇大摆并且嘲笑了黑老大然后给黑老大儿子手臂开了一枪。黑老大非常生气。</p><p>星仔莫名其妙被洪义的人打了一顿，回到酒吧也被辞退了，回头一想去找黑老大，黑老大安排了一个工作给他。</p><p>星仔去到酒吧看到一个妹子在唱歌，很开心。进房后自我介绍后被叫买宵夜，很不开心，然后被阿俊（黑老大义子）叫出去聊天，两人交谈了一下。见到那个妹子被三个流氓欺负，星仔去救，失败，啊俊出场。三人结识。</p><p>星仔和洪义一起聚桑拿（坐隔壁），洪义让星仔拼命浇水，整个桑拿房无比闷热，星仔放了几个屁，洪义让其继续加水。星仔拿着浇水的盆咋想洪义的手下的头，星仔队友开枪打死洪义。</p><p>再次回到酒吧，星仔表演唱歌被笑，啊俊上……</p><p>三人到处玩耍，得知妹子的妹子叫安妮，安妮给她们两个人都送了一支笔，笔上分别有他们的字。埋下伏笔</p><p>黑老大派星仔和阿俊还有阿标（黑老大手下）去泰国跟全叔谈判要加量，全叔直接被拜猜的人干掉，三人被抓，阿俊和阿标被打得半死不活，星仔挺身而出救了他们自己做了人质，星仔和拜猜聊天，都很开心，（但如果阿俊他们不回来交易就会被杀），交易结束。</p><p>星仔回到香港抱怨没人来接，回到家里泡澡疑似有人闯进来，被盖住头立马跪下求饶，被阿俊和阿标嘲笑，然后星仔去阿标家里吃饭。</p><p>黑老大召集大家开了一个会议是关于继承人的事情，大家推举阿标坐他的位置，黑老大不爽，派人杀阿标。</p><p>阿标办了一个酒会庆祝他有儿子，结束后星仔扶阿标走，被阿标询问儿子应该叫什么，星仔取了一个名字给他“周润龙”，阿标不知道“润”怎么写，星仔用笔在阿标手上写了润字，笔遗漏在阿标车顶，阿标拒绝了星仔送回家，被黑老大杀手杀死。</p><p>另一个杀手准备杀星仔，被星仔逃跑，大家都怀疑是星仔杀阿标的，黑老大通缉星仔。</p><p>星仔打电话给阿俊，阿俊被跟踪。星仔跟阿俊谈判的时候杀手开了一枪，没有打死，星仔做诱饵，阿俊跑上山把杀手干掉。</p><p>阿俊跟人打斗的时候死了，星仔难过，跟安妮交代之后退隐。</p><p>黑老大跟儿子说：“现在你的绊脚石都杀了”，还讲了刘邦的故事，然后黑老大就被枪打死了，儿子说：我最大的绊脚石就是你</p><blockquote><p>全剧终。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春娇救志明3</title>
    <link href="undefined2017/06/22/%E6%98%A5%E5%A8%87%E6%95%91%E5%BF%97%E6%98%8E3/"/>
    <url>2017/06/22/%E6%98%A5%E5%A8%87%E6%95%91%E5%BF%97%E6%98%8E3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>春娇童年有一个关于“吃刚刚”的故事，这是她的心里阴影。</p></blockquote><p>志明喜欢买各种东西，常把男人必须有一个 xx 挂在嘴边。</p><p>志明去遛狗，一个误会让春娇首次怀疑志明，误会解除。</p><p>志明的干妈想跟他借种（纯借精），志明考虑很久拒绝，春娇开心，两人准备去台湾。</p><p>春娇的爸爸是很不责任喜欢逃避的人，跟志明混在一起，春娇害怕志明跟她爸一样。</p><p>志明见她爸，春娇问她爸女票：为什么是他，答：最危险时想起的人就是对的</p><p>春娇与志明去台湾，春娇故意没带套想要小孩，完事后疑似地震，志明抛弃春娇，春娇难过…跑路</p><p>春娇强行让自己体会危险，跑浴缸，拿朔料袋盖住头，无果。</p><p>两人经过极度挣扎，在春娇生日时，春娇唱歌，志明难过…</p><p>志明与春娇她爸和飞鹰演戏被拆穿，春娇说算了。</p><p>志明疯狂唱歌，表白：是你让我长大，是你拯救我，要不是你我还长不大变不了一个男人…以前我以为一个男人需要很多别的事证明，其实不用，只需要跟一个我喜欢的在乎的女人好好过日子就行。半跪求婚 ing</p><blockquote><p>带上戒指，完。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xamarin Forms 建立可以绑定属性的方法</title>
    <link href="undefined2017/06/19/XamarinForms%E5%BB%BA%E7%AB%8B%E5%8F%AF%E4%BB%A5%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>2017/06/19/XamarinForms%E5%BB%BA%E7%AB%8B%E5%8F%AF%E4%BB%A5%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>本文讲述如何实现控件的属性如何可以被 Binding</p><h1 id="官方例子"><a href="#官方例子" class="headerlink" title="官方例子"></a>官方例子</h1><pre><code>[RenderWith(typeof(_ActivityIndicatorRenderer))]    public class ActivityIndicator : View, IElementConfiguration&lt;ActivityIndicator&gt;    {        //这就是值类型绑定的实现        public static readonly BindableProperty IsRunningProperty = BindableProperty.Create        (&quot;IsRunning&quot;, typeof(bool), typeof(ActivityIndicator), default(bool));        public static readonly BindableProperty ColorProperty = BindableProperty.Create        (&quot;Color&quot;, typeof(Color), typeof(ActivityIndicator), Color.Default);        readonly Lazy&lt;PlatformConfigurationRegistry&lt;ActivityIndicator&gt;&gt; _platformConfigurationRegistry;        public ActivityIndicator()        {            _platformConfigurationRegistry = new Lazy&lt;PlatformConfigurationRegistry&lt;ActivityIndicator&gt;&gt;(() =&gt; new PlatformConfigurationRegistry&lt;ActivityIndicator&gt;(this));        }        public Color Color        {            get { return (Color)GetValue(ColorProperty); }            set { SetValue(ColorProperty, value); }        }        //与之对对应的属性        public bool IsRunning        {            get { return (bool)GetValue(IsRunningProperty); }            set { SetValue(IsRunningProperty, value); }        }        public IPlatformElementConfiguration&lt;T, ActivityIndicator&gt; On&lt;T&gt;() where T : IConfigPlatform        {            return _platformConfigurationRegistry.Value.On&lt;T&gt;();        }    }</code></pre><blockquote><p>Ps：这个官方例子是有问题的。</p></blockquote><h2 id="下面讲一下如何绑定事件，其实-Xamarin-Forms-绑定事件用的是-Command，方法也不难。"><a href="#下面讲一下如何绑定事件，其实-Xamarin-Forms-绑定事件用的是-Command，方法也不难。" class="headerlink" title="下面讲一下如何绑定事件，其实 Xamarin Forms 绑定事件用的是 Command，方法也不难。"></a>下面讲一下如何绑定事件，其实 Xamarin Forms 绑定事件用的是 Command，方法也不难。</h2><pre><code>public class MyEntry:Entry{    public ICommand MyCommand    {        get =&gt; (ICommand )GetValue(MyCommandProperty);        set =&gt; SetValue(MyCommandProperty, value);    }    /// &lt;summary&gt;    /// MyCommandProperty的Mvvm实现    /// &lt;/summary&gt;    public static readonly BindableProperty MyCommandProperty = Create    (        nameof(回调方法),        typeof(ICommand),        typeof(MyEntry)    ); //注意这里变量名的命名规则是MyCommand + Property，前者随便，后者固定语法    private void 回调方法()    {        MyCommand?.Execute(null);    }}//这样这个MyEntry的MyCommand就可以被Mvvm绑定了。</code></pre><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><pre><code>&lt;MyEntry MyCommand={ Binding ThisCommand &gt;&lt;/MyEntry&gt;</code></pre><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><pre><code>public class Model:某个mvvm框架的BasePage{    public Command ThisCommand    {        get        {            retrun new Command(()=&gt;            {                //做点什么            });        }    }}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>XamarinForms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>翻译Rolling your own Mvvm for Xamarin.Forms</title>
    <link href="undefined2017/06/09/%E7%BF%BB%E8%AF%91Rolling-your-own-Mvvm-for-Xamarin.Forms/"/>
    <url>2017/06/09/%E7%BF%BB%E8%AF%91Rolling-your-own-Mvvm-for-Xamarin.Forms/</url>
    
    <content type="html"><![CDATA[<p>#原文地址：<a href="http://www.michaelridland.com/xamarin/rolling-mvvm-xamarin-forms/" target="_blank" rel="noopener">http://www.michaelridland.com/xamarin/rolling-mvvm-xamarin-forms/</a></p><p>#实现自己的 Mvvm for Xamarin.Forms<br>更新：我已经采取了这个位置的最好的部分，并放入一个框架，这是一个超简单的 Mvvm 框架的 Xamarin.Forms，它放在了 github 和 nuget。<br>在这个博客中，我给出了一个如何在 Xamarin.Forms 中实现自己的 Mvvm 的例子。 这个 Mvvm 是基于约定的，在这种情况下，我使用了 Page / PageModel 命名，而不是 Model / ViewModel 命名，但是如果你喜欢，你可以将其改为 View / ViewModel。 这个博客写的内容基于 github 上可用的示例应用程序。</p><p>##本例中的约定。</p><ul><li>页面必须有一个相应的 PageModel，命名重要，所以 QuotePageModel 必须有一个 QuotePage</li><li>一个页面可以有一个没有参数的 Init 方法</li><li>页面可以有一个 PageModel 属性，它是视图模型</li><li>页面上的 BindingContext 将自动设置为 Model</li><li>一个模型可以有一个接收一个对象的 Init 方法</li><li>一个模型可以具有一个 ReverseInit 方法，它也可以使用一个对象，当一个模型被放在一个对象上时被调用</li></ul><p>###让我们看一个页面</p><pre><code>public class QuotePage : ContentPage{    //按下时自动弹出    public QuotePageModel PageModel { get; set; }    public QuotePage ()    {    }    //出现时自动执行    public void Init()    {        Title = &quot;Quote&quot;;    }}</code></pre><p>###和相应的 PageModel</p><pre><code>public class QuotePageModel : BasePageModel{    IDatabaseService _databaseService;    public Quote Quote { get; set; }    //数据库服务自动注入。    public QuotePageModel (IDatabaseService databaseService)    {        _databaseService = databaseService;    }    //当Model出现的时候执行    public void Init(object data)    {        Quote = data as Quote;        if (Quote == null)            Quote = new Quote ();    }    public Command Done    {        get {            return new Command (() =&gt; {                //This pops the current Page                PopPageModel();            });        }    }}</code></pre><p>##Navigating Models<br>您可以使用 PushPageModel 方法和 PopPageModel 方法从视图模型中推送和弹出页面。</p><p>例如。<code>PushPageModel&lt;QuotePageModel&gt;（quote）;</code></p><p>但在您可以做到这一点之前，您需要实现和注册一个 IRootNavigation 服务。 在我的情况下，我使用了一个 ContainerPage 并将其注册为 NavigationHandler</p><p>//注册根导航</p><pre><code>var containerPage = new RootContainerPage（）;TinyIoC.TinyIoCContainer.Current.Register &lt;IRootNavigation&gt;（containerPage）;</code></pre><pre><code>public class RootContainerPage : MasterDetailPage, IRootNavigation{    ContentPage _menuPage;    NavigationPage _contactNavPage, _quotesNavPage;    public RootContainerPage ()    {        _contactNavPage = new NavigationPage (BasePageModel.ResolvePageModel&lt;ContactsRootPageModel&gt; (null));        _quotesNavPage = new NavigationPage (BasePageModel.ResolvePageModel&lt;QuotesRootPageModel&gt; (null));        Detail = _contactNavPage;        _menuPage = new ContentPage ();        _menuPage.Title = &quot;Menu&quot;;        var listView = new ListView();        listView.ItemsSource = new string[] { &quot;Contacts&quot;, &quot;Quotes&quot; };        listView.ItemSelected += (sender, args) =&gt;        {            if ((string)args.SelectedItem == &quot;Contacts&quot;)                Detail = _contactNavPage;            if ((string)args.SelectedItem == &quot;Quotes&quot;)                Detail = _quotesNavPage;            IsPresented = false;        };        _menuPage.Content = listView;        Master = new NavigationPage(_menuPage) { Title = &quot;Menu&quot; };    }    public void PushPage (Page page, BasePageModel model)    {        ((NavigationPage)Detail).PushAsync (page);    }    public void PopPage ()    {        ((NavigationPage)Detail).PopAsync ();    }}</code></pre><p>##Implementing Property Changed<br>你会注意到我不需要实现属性更改事件，而是使用一个名为<a href="https://github.com/Fody/PropertyChanged" target="_blank" rel="noopener">Fody / PropertyChanged</a>的开源项目实现。 您可以从 nuget 安装。</p><p>##控制反转/ TinyIOC<br>ViewPage 构造函数的依赖将自动注入。 使用 TinyIOC 注册依赖项。</p><p>//注册数据库服务<br><code>TinyIoC.TinyIoCContainer.Current.Register &lt;IDatabaseService，DatabaseService&gt;();</code></p><p>##神奇的地方在哪里？<br>如果你想知道神奇的实现在哪里发生，那么看看<a href="https://github.com/rid00z/XamarinFormsQuoteApp/blob/master/XamarinFormsQuoteApp/PageModels/BasePageModel.cs" target="_blank" rel="noopener">示例应用程序中的 BasePageModel.cs。</a></p><p>##平台依赖关系<br>此应用程序利用 SQLite 的平台依赖关系。</p><p>##单元测试<br>如果我们遵循惯例，那么模型是松耦合的，容易测试。</p><p>您可以将模拟的依赖关系传递给模型并进行测试。 在这里看到一个例子：</p><pre><code>[TestFixture]public class ContactPageModelTests{    [Test]    public static void CreateNewContact()    {        var container = A.Fake&lt;IRootNavigation&gt; ();        TinyIoC.TinyIoCContainer.Current.Register&lt;IRootNavigation&gt; (container);        var db = new DatabaseService (new SQLiteFactory());        var vm = new ContactPageModel (db);        vm.Init (null);        //保存到数据库        vm.Contact.Name = &quot;Peter&quot;;        vm.Contact.Phone = &quot;9087&quot;;        vm.Done.Execute (null);        Assert.IsTrue (vm.Contact.ContactId &gt; 0);        //从数据库取出        var savedContact                = db.Conn.Table&lt;Contact&gt; ().Where ((c) =&gt; c.ContactId == vm.Contact.ContactId).FirstOrDefault ();        Assert.AreEqual (&quot;Peter&quot;, savedContact.Name);        Assert.AreEqual (&quot;9087&quot;, savedContact.Phone);        A.CallTo (() =&gt; container.PopPage ()).MustHaveHappened ();    }}</code></pre><p>请去看看 github 上的代码。</p><p><a href="https://github.com/rid00z/XamarinFormsQuoteApp" target="_blank" rel="noopener">https://github.com/rid00z/XamarinFormsQuoteApp</a></p><p>Thanks</p><p>Michael</p>]]></content>
    
    
    
    <tags>
      
      <tag>XamarinForms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Glimpse the Future of Xamarin Forms 3.0 翻译</title>
    <link href="undefined2017/06/09/Glimpse-the-Future-of-XamarinForms-3.0-%E7%BF%BB%E8%AF%91/"/>
    <url>2017/06/09/Glimpse-the-Future-of-XamarinForms-3.0-%E7%BF%BB%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p>#原文地址：<a href="https://blog.xamarin.com/glimpse-future-xamarin-forms-3-0/" target="_blank" rel="noopener">https://blog.xamarin.com/glimpse-future-xamarin-forms-3-0/</a></p><p>#Xamarin Forms 3.0<br>在 Microsoft Build 2017 中，我们分享了对 Xamarin.Forms 3.0 的愿景：在更多的平台上可以使用 Xamarin.Forms，并且以前更快。 今天，我想介绍一些令人兴奋的新功能，我们将添加到 Xamarin.Forms，我们知道你会爱上这个功能的！</p><p>##Xamarin.Forms 嵌入<br>您一直能够从 Xamarin.Forms 调用本机 API，但是现在我们允许您使用大多数本机应用程序的 Xamarin.Forms。</p><p><img src="http://upload-images.jianshu.io/upload_images/5692364-16ea9eebb29ddb67.gif?imageMogr2/auto-orient/strip" srcset="/img/loading.gif" alt="embedding-uwp-desktop.gif"></p><p>无论您是将 xamarin.Forms 全部进入，还是只想将其用于您最常使用的本机应用程序，我们将启用所有路径; 我们称之为 Xamarin.Forms 嵌入。 在 XAML 或 C＃中使用任何 ContentPage，并将其直接嵌入到 Xamarin.iOS，Xamarin.Android 或 UWP 应用程序中。</p><p>所有现有的 Xamarin.Forms UI 现在已经在 Xamarin.Forms 应用程序之外扩展了使用。</p><p>这是它的外观。 在非 Xamarin.Forms 应用程序中，使用该平台的预期参数初始化 Forms 并使用方便的方法就可以创建 ContentPage 的本机对象。 就这样，你的手指就掌握了原生的控制！</p><pre><code>// AndroidForms.Init(this, null);var androidFragment = new MyFormsPage().CreateFragment(this);// iOSForms.Init()var iosViewController = new MyFormsPage().CreateViewController();// UWPForms.Init(e);var uwpElement = new MyFormsPage().CreateFrameworkElement();</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/5692364-52aa87d296279e34.gif?imageMogr2/auto-orient/strip" srcset="/img/loading.gif" alt="2017-05-15_13-57-14.gif"></p><p>Xamarin.Forms 的功能，如 DependencyService，MessagingCenter 和数据绑定系统，在这种情况下都可以使用。</p><p>##兼容更多平台</p><p>Xamarin.Forms 正在走向更多的平台！ 准备在 MacOS 使用 WPF，Linux 以及更多的 Windows 应用程序上运行。 今天我们已经开始使用 macOS，但是我们并没有停在那里，我们可以让您定位每个桌面平台！ 我们的团队正在为 GTK＃和 WPF 开发。</p><p><img src="http://upload-images.jianshu.io/upload_images/5692364-c1b23c21387016cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" srcset="/img/loading.gif" alt="image.png"></p><p>##性能提升和增强<br>我们将 Xamarin.Forms 放在显微镜下，以确定使您的应用加载速度更快，运行更快的关键目标，具体为：</p><ul><li>控制渲染器：我们继续我们适当称之为快速渲染器的工作。 这些重构的渲染器避免创建多余的中间对象和实现更好的性能。</li><li>布局压缩：启用时，我们会在编译时优化布局，以提高渲染速度并最大限度地减少内存使用。</li><li>绑定系统：我们正在引入一次绑定模式。</li><li>灵活性：流行的 Web 布局系统来到 Xamarin.Forms。 我们正在引入一个 FlexLayout 系统来构建自适应布局并实现一个 Visual State Manager。</li><li>Styling：我们正在抛光经常需要的 CSS 样式实现。 你可以像今天一样继续为您的应用程序设计样式，如果您是 CSS 的粉丝，那就太好了。</li></ul><p>##介绍 XAML 标准<br>正如 Microsoft Build 2017 所宣布的，我们正在与 XAML Standard 的 Windows 部门进行合作，这是 XAML 作为资产共享的一种方式。 Xamarin.Forms 将完全支持 XAML 标准，并带您到需要启动的每个平台。</p><p>支持 XAML Standard 的框架将能够共享基于 XAML 的常见 UI 定义。 我们的目标是在今年晚些时候推出第一个版本 XAML Standard 1.0。</p><p>##尝试今天加入交流<br>今天可以在这里开始我们为 Xamarin.Forms 3.0 Cooking 的所有好东西。</p><p>##下载 Xamarin.Forms 3.0 预览<br>我们已经将 Xamarin.Forms 的预览内容发布到新的 Feed，并共享了我们的演示代码。 得到它：</p><ul><li>向 NuGet Manager 添加新的源代码：https：//<a href="http://www.myget.org/F/xamarinforms-dev/api/v3/index.json" target="_blank" rel="noopener">www.myget.org/F/xamarinforms-dev/api/v3/index.json</a></li><li>检查预发行</li><li>选择并安装功能名称为“Embedding”的软件包。3.0.0.100-embeddingpreview</li><li>在 GitHub 上下载 Weather 演示应用程序代码。<a href="https://github.com/davidortinau/build2017-new-in-xamarin-forms" target="_blank" rel="noopener">https://github.com/davidortinau/build2017-new-in-xamarin-forms</a></li><li>准备好后，请浏览完整的 Xamarin.Forms 路线图，并加入 GitHub 上的 XAML Standard 对话。</li></ul><p>###准备好后，请浏览完整的 Xamarin.Forms 路线图，并加入 GitHub 上的 XAML Standard 交流。</p><ul><li><a href="https://aka.ms/xfroadmap" target="_blank" rel="noopener">Xamarin.Forms Roadmap</a>，并向我们提供有关这些公告的反馈。</li><li>在<a href="https://aka.ms/xamlstandard" target="_blank" rel="noopener">aka.ms/xamlstandard</a>.中加入 XAML 标准对话。</li><li>在<a href="https://blog.xamarin.com/preview-bringing-macos-to-xamarin-forms/" target="_blank" rel="noopener">blog.xamarin.com/preview-bringing-macos-to-xamarin-forms/</a>.上预览 XAMarin.Forms for macOS。</li></ul><p>####在 channel9.msdn.com/events/Build/2017/B8099 上观看我们完整的 Microsoft Build 2017 Xamarin.Forms 会话。</p><p><a href="https://sec.ch9.ms/ch9/e613/96a58de3-75e5-4d9e-9b15-e216a03fe613/B8099_high.mp4" target="_blank" rel="noopener">观看连接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>XamarinForms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rg.Popup-Xamarin Forms使用教程</title>
    <link href="undefined2017/06/06/Rg.Popup-XamarinForms%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>2017/06/06/Rg.Popup-XamarinForms%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>这是一个增强 popup 的插件，这里只讲用法，不讲原理。<br>第一步：装 Nuget 包，在 Pcl 项目中搜索”Rg.Plugins.Popup”作者是：Kirill Lyubimov，其他项目不需要装。(<a href="http://www.jianshu.com/p/a71d10660b3a" target="_blank" rel="noopener">装 Nuget 教程</a>）<br>第二步：创建 popup 页面（就是弹出显示的那个页面）<br>第三步：使用 PopupNavigation 类的几个导航方法。</p><p>好，知道了基本步骤之后就开始教程。<br>第一步应该都知道怎么操作，不多讲了。</p><p>重点讲第二步：<br>第二步内容比较多，我们一个一个来操作。 </p><ul><li>新建一个项目叫 Demo（跨平台项目） </li><li>创建一个 Popup 的 Page 新建项：——类型选：Forms Blank Content Page Xaml ，取名为 DemoPopupPage 吧。 </li><li>在 DemoPopupPage.Xaml 页面里面必须这样写</li></ul><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;pages:PopupPage xmlns=&quot;http://xamarin.com/schemas/2014/forms&quot;             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;             xmlns:pages=&quot;clr-namespace:Rg.Plugins.Popup.Pages;assembly=Rg.Plugins.Popup&quot;             xmlns:animations=&quot;clr-namespace:Rg.Plugins.Popup.Animations;assembly=Rg.Plugins.Popup&quot;             x:Class=&quot;Demo.DemoPopupPage&quot;&gt; &lt;!--代码块1--&gt;&lt;/pages:PopupPage&gt;</code></pre><p>下面是“代码块 1”：</p><pre><code>  &lt;pages:PopupPage.Animation&gt;    &lt;animations:ScaleAnimation      PositionIn=&quot;Top&quot;      PositionOut=&quot;Center&quot;      ScaleIn=&quot;1&quot;      ScaleOut=&quot;0.7&quot;      DurationIn=&quot;700&quot;      EasingIn=&quot;BounceOut&quot;/&gt;  &lt;/pages:PopupPage.Animation&gt;&lt;!--布局--&gt;</code></pre><h2 id="对上面的代码稍作解释："><a href="#对上面的代码稍作解释：" class="headerlink" title="对上面的代码稍作解释："></a>对上面的代码稍作解释：</h2><p>animations:ScaleAnimation 表示使用缩放动画<br>对于 PositionIn/PositionOut 属性</p><pre><code>表示Popup从页面的哪个方位进入/弹出。它有：Center,Left,Right,Top,Bottom四个可以选，它的类型是MoveAnimationOptions，它是一个枚举。</code></pre><p>关于 PositionIn/PositionOut</p><pre><code>表示Popup出现/消失动画的持续时间</code></pre><p>关于 ScaleIn/ScaleOut</p><pre><code>表示出现/消失动画执行完毕后渲染Popup的时间</code></pre><p>关于 EasingIn</p><pre><code>表示动画的特性。一共有* Linear;   线性变换。* SinOut;   平滑减速，就是慢慢变慢* SinIn;    平稳加速，缓缓变快* SinInOut; 加速进出，Popup出现和消失都会加速* CubicIn;  慢慢开始加速，加速度不定的加速。* CubicOut; 开始快速减速。，加速度不定的减速。* CubicInOut加速减速。 一般选择。* BounceOut;弹跳3次，静止在目的地* BounceIn; 弹跳2次，然后静止在目的地* SpringIn;不知道怎么解释，自己测试吧* SpringOut;跟BounceIn有些类似，但是更有柔软性</code></pre><p>Ps：这些属性在不同的动画类型展示出来的效果是不一样的。这些属性更像形容词，套到这里的缩放动画就是：线性变化的缩放动画</p><p>Ok，其他动画也大同小异。然后到<!--布局-->这里<br>这里没有什么太大的问题。<br>要注意 2 个点，第一层布局必须是 StackLayout,Grid 这类布局，然后第二层布局一定是 Frame（为了不把背景全部盖住），再下一级的布局跟正常的布局是一样的没有区别。<br>示例代码：</p><pre><code>    &lt;StackLayout VerticalOptions=&quot;Center&quot; HorizontalOptions=&quot;Center&quot;&gt;        &lt;Frame BackgroundColor=&quot;Silver&quot;&gt;            &lt;StackLayout Spacing=&quot;20&quot;&gt;                &lt;ListView x:Name=&quot;ListView&quot;&gt;                    &lt;ListView.ItemTemplate&gt;                        &lt;DataTemplate&gt;                            &lt;ViewCell&gt;                                &lt;StackLayout Orientation=&quot;Horizontal&quot;&gt;                                    &lt;Label Text=&quot;{Binding Briefing}&quot;&gt;&lt;/Label&gt;                                    &lt;Label Text=&quot;{Binding Color}&quot;&gt;&lt;/Label&gt;                                    &lt;Label Text=&quot;{Binding Composition}&quot;&gt;&lt;/Label&gt;                                &lt;/StackLayout&gt;                            &lt;/ViewCell&gt;                        &lt;/DataTemplate&gt;                    &lt;/ListView.ItemTemplate&gt;                &lt;/ListView&gt;                &lt;Label Text=&quot;??&quot;&gt;&lt;/Label&gt;            &lt;/StackLayout&gt;        &lt;/Frame&gt;    &lt;/StackLayout&gt;</code></pre><p>Ps:StackLayout 的 VerticalOptions=”Center” HorizontalOptions=”Center”表示这个 Popup 会在屏幕中间，修改可以出现在其他的地方。</p><p>自定义动画：</p><blockquote><p>有空再更</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>XamarinForms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xamarin Forms-如何横置组件</title>
    <link href="undefined2017/06/05/XamarinForms-%E5%A6%82%E4%BD%95%E6%A8%AA%E7%BD%AE%E7%BB%84%E4%BB%B6/"/>
    <url>2017/06/05/XamarinForms-%E5%A6%82%E4%BD%95%E6%A8%AA%E7%BD%AE%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>原理其实很简单，就是通过 <code>ListView</code> 的 <code>Rotation</code> 属性旋转即可。 ##如果你想做图片轮播话建议用 <code>scroview</code>，如果 <code>page</code> 里面有一个竖向的 <code>listview</code> 也有一个横向的，会导致两者冲突，用 <code>scroview</code> 才对。代码换成 <code>scroview</code> 即可完美解决</p><h1 id="例子如下："><a href="#例子如下：" class="headerlink" title="例子如下："></a>例子如下：</h1><h2 id="MainPage-Xaml"><a href="#MainPage-Xaml" class="headerlink" title="MainPage.Xaml"></a>MainPage.Xaml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;ContentPage xmlns=&quot;http://xamarin.com/schemas/2014/forms&quot;             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;             xmlns:local=&quot;clr-namespace:TapListView&quot;             x:Class=&quot;TapListView.MainPage&quot;&gt;    &lt;StackLayout Orientation=&quot;Horizontal&quot;&gt;        &lt;Button x:Name=&quot;Button1&quot; Text=&quot;左滑&quot; HorizontalOptions=&quot;FillAndExpand&quot; Opacity=&quot;0.5&quot;&gt;&lt;/Button&gt;        &lt;StackLayout HorizontalOptions=&quot;FillAndExpand&quot;&gt;            &lt;ListView x:Name=&quot;ListView&quot; Rotation=&quot;90&quot; HasUnevenRows=&quot;True&quot;&gt;                &lt;ListView.ItemTemplate&gt;                    &lt;DataTemplate&gt;                        &lt;ViewCell&gt;                            &lt;Image Source=&quot;{Binding .}&quot; Rotation=&quot;270&quot;                                   VerticalOptions=&quot;FillAndExpand&quot;                                   HorizontalOptions=&quot;FillAndExpand&quot;&gt;                            &lt;/Image&gt;                        &lt;/ViewCell&gt;                    &lt;/DataTemplate&gt;                &lt;/ListView.ItemTemplate&gt;            &lt;/ListView&gt;        &lt;/StackLayout&gt;        &lt;Button x:Name=&quot;Button2&quot; Text=&quot;右滑&quot; Opacity=&quot;0.5&quot;                HorizontalOptions=&quot;FillAndExpand&quot;&gt;&lt;/Button&gt;    &lt;/StackLayout&gt;&lt;/ContentPage&gt;</code></pre><h2 id="MainPage-cs（这代码跟横置-ListView-没有关系）"><a href="#MainPage-cs（这代码跟横置-ListView-没有关系）" class="headerlink" title="MainPage.cs（这代码跟横置 ListView 没有关系）"></a>MainPage.cs（这代码跟横置 ListView 没有关系）</h2><pre><code>using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using Xamarin.Forms;namespace TapListView{    public partial class MainPage : ContentPage    {        public List&lt;ImageSource&gt; ImageSources { get; set; } = new List&lt;ImageSource&gt;();        public MainPage()        {            InitializeComponent();            SetSource();            ListView.ItemsSource = ImageSources;        }        private void SetSource()        {            ImageSources.Add(ImageSource.FromUri(new Uri(&quot;http://img.youguoquan.com/uploads/magazine/content/4317b8660f13b0826380d5ef0c4bc963_magazine_web_m.jpg&quot;)));            ImageSources.Add(ImageSource.FromUri(new Uri(&quot;http://img.youguoquan.com/uploads/magazine/content/7621a57ace831fa0c8616fff6497edf3_magazine_web_m.jpg&quot;)));            ImageSources.Add(ImageSource.FromUri(new Uri(&quot;http://img.youguoquan.com/uploads/magazine/content/f5ff39f3f5304a45e8b8b4952fdca368_magazine_web_m.jpg&quot;)));            ImageSources.Add(ImageSource.FromUri(new Uri(&quot;http://img.youguoquan.com/uploads/magazine/content/1595ab2bad62fe267b55c1f450445136_magazine_web_m.jpg&quot;)));        }    }}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>XamarinForms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇葩说-第四季金句</title>
    <link href="undefined2017/05/04/%E5%A5%87%E8%91%A9%E8%AF%B4-01/"/>
    <url>2017/05/04/%E5%A5%87%E8%91%A9%E8%AF%B4-01/</url>
    
    <content type="html"><![CDATA[<p>抬头看着太阳说，你该下山了。 – 欧阳超</p><p>世上是没有事有意义的，意义都是人赋予的，而坚持本身就是无比闪亮的意义 – 陈铭</p><p>你不觉得，现实本身是由梦想来支撑的吗？– 张泉灵</p><p>好朋友就像另一个自己，我们要听好朋友的声音是听一个我们无法跟自己内心 直接对话可是我们想要听到另外一个自己的声音，你作为一个好朋友，不提供这个声音让那个人听见，却误以为他只要照他自己的意思走下去就够了，那他在世界上孤身一人家好了，要好朋友干什么？所以好朋友像人生的一个滤勺，它把我们的杂质都滤掉了，让我们更纯净。 – 蔡康永</p><p>什么叫梦想，一种叫我实现了梦想，一种是梦想因我而实现。– 宋佳</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂文</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>